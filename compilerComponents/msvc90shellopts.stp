#  $Revision: 1.1.6.2 $
#  Copyright 2009-2011 The MathWorks, Inc.

sub msvc90shellopts 
{
    my $input = shift;
    my $default_location = "C:\\Program Files (x86)\\Microsoft Visual Studio 9.0";
    my $sdk_dir = "";
    my $registry_lookup_fcn = $input->{"registry_lookup"};

    my @language_handled = ('C');

    my $locate_fcn = sub {
        my @msvc9_roots = ();
        my $msvc9_root;
        my $candidate_location;

        my $is_valid_root_fcn = sub {
            my $candidate_location = shift;
            my $isvalid = 0;
            if ($candidate_location ne "" &&  
                -e "$candidate_location\\VC\\bin\\link.exe" &&
                -e "$candidate_location\\Common7\\IDE\\devenv.exe" &&
                !-e "$candidate_location\\VC\\bin\\cl.exe") { 
                $oldPath = $ENV{'PATH'};
                $ENV{'PATH'} = "$candidate_location\\Common7\\IDE;$oldPath";
                if (&correct_version("$candidate_location\\VC\\bin\\link.exe","9.0")){ 
                    $isvalid = 1;
                }
                $ENV{'PATH'} = "$oldPath";
            }
            return $isvalid;
        };
        
        # Check install and location using the 32-bit LINK.EXE; check for 64-bit
        # tools later.  This allows 32-bit-only installs to appear as 
        # installed, then throw an error at selection-time.  
        # This is easier to debug than not listing the compiler.
        
        # Search the default environment variable location. 
        # Since most MSVC 2008 variants use the same environment 
        # variable (VS90COMNTOOLS),
        # use the directory structure to differentiate between the two.
        $msvc9_root = $ENV{'VS90COMNTOOLS'}; 
        $msvc9_root =~ s|\\+Common7\\+Tools\\*$||i; 
        $candidate_location = $msvc9_root;
        if (&$is_valid_root_fcn($candidate_location)) {
            push(@msvc9_roots, $candidate_location);
        }

        # Search the registry. 
        $msvc9_root = &$registry_lookup_fcn("SOFTWARE\\Microsoft\\VisualStudio\\9.0\\" . 
                                            "Setup\\VC", "ProductDir");
        $msvc9_root =~ s|\\VC\\$||i; 
        $candidate_location = $msvc9_root;
        if (&$is_valid_root_fcn($candidate_location)) {
            push(@msvc9_roots, $candidate_location);
        }

        # Search the default install location.
        $candidate_location = $default_location;
        if (&$is_valid_root_fcn($candidate_location)) {
            push(@msvc9_roots, $candidate_location);
        }

        return @msvc9_roots;
    };

    my $root_val = sub {
        my $erred = 0;
        my $err_msg, $warn_msg;
        my $base_directory = shift;
        if (!-e "$base_directory\\VC\\bin\\amd64\\link.exe"){
            $err_msg = "\n" . 
                  "*****************************************************************************\n" .
                  "  Error: Could not find the 64-bit linker.  This may indicate that the \n" .
                  "         \"X64 Compilers and Tools\" or the Microsoft Windows Software \n" .
                  "         Development Kit (SDK) is not installed.  To build 64-bit MEX-files \n" .
                  "         Microsoft Visual C++ 2008 Shell requires that these two \n" .
                  "         packages are installed properly. \n" .
                  "*****************************************************************************\n";
            $erred = 1;
        }
        my $sdk_location = "$base_directory\\VC\\PlatformSDK";

        if ($sdk_location eq "" ||
            !-e "$sdk_location\\bin\\mt.exe"){
            $err_msg = "\n" . 
                  "*****************************************************************************\n" .
                  "  Error: Could not find the Microsoft Windows Software Development Kit (SDK). \n" .
                  "         This may indicate that the Microsoft Windows SDK or the \n" .
                  "         \"X64 Compilers and Tools\" is not installed.  To build 64-bit \n" .
                  "         MEX-files Microsoft Visual C++ 2008 Shell requires that \n" .
                  "         these two packages are installed properly. \n" .
                  "*****************************************************************************\n";
            $erred = 1;
        }
        
        if (!$erred) {
            $warn_msg = "\n" .
                  "***************************************************************************\n" .
                  "  Warning: MEX-files generated using Microsoft Visual C++ 2008 require\n" .
                  "           that Microsoft Visual Studio 2008 run-time libraries be \n" .
                  "           available on the computer they are run on.\n" .
                  "           If you plan to redistribute your MEX-files to other MATLAB\n" .
                  "           users, be sure that they have the run-time libraries.\n" . 
                  "***************************************************************************\n";
        }
        return ($err_msg, $warn_msg);
    };

# In the case of the VS2008 compiler the link_val key is used to specify
# the location of the SDK

    return {
        "vendor_name"      => "Microsoft Visual C++ 2008 Shell",
        "version"          => "",                          #This version is left blank intentionally.
        "group_id"         => "MSVC",
        "serial"           => 6.02,
        "root_var"         => "VSINSTALLDIR",
        "optfile_name"     => "msvc90shellopts.bat",
        "default_location" => $default_location,
        "language_handled" => \@language_handled,
        "root_val"         => $root_val,
        "locate"           => $locate_fcn,
        };
}
1;
